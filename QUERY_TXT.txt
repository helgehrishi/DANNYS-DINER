-- 01. QUERY TO FIND THE TOTAL AMOUNT EACH CUSTOMER SPENT AT THE RESTAURANT
-- FIRST, RETRIEVE THE PRICE OF EACH ITEM PURCHASED BY THE CUSTOMER
SELECT
    S.CUSTOMER_ID,
    M.PRICE
FROM
    SALES AS S
    INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID;

-- NOW, CALCULATE THE TOTAL AMOUNT SPENT BY EACH CUSTOMER
SELECT
    S.CUSTOMER_ID,
    SUM(M.PRICE) AS TOTAL_AMOUNT
FROM
    SALES AS S
    INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY
    S.CUSTOMER_ID;

-- 02. QUERY TO FIND HOW MANY DAYS EACH CUSTOMER VISITED THE RESTAURANT
-- COUNTING DISTINCT DATES TO DETERMINE VISIT DAYS
-- GROUPING BY CUSTOMER TO GET THE VISIT COUNT PER CUSTOMER
SELECT
    CUSTOMER_ID,
    COUNT(DISTINCT (ORDER_DATE)) AS NO_OF_DAYS
FROM
    SALES
GROUP BY
    CUSTOMER_ID;

-- 03. QUERY TO FIND THE FIRST ITEM PURCHASED BY EACH CUSTOMER
-- FINDING THE EARLIEST ORDER DATE FOR EACH CUSTOMER
-- GROUPING BY CUSTOMER TO IDENTIFY THEIR FIRST ORDER DATE
SELECT
    CUSTOMER_ID,
    MIN(ORDER_DATE) AS FIRST_ORDER_DATE
FROM
    SALES
GROUP BY
    CUSTOMER_ID;

-- QUERY TO RETRIEVE THE FIRST ITEM PURCHASED BY EACH CUSTOMER BASED ON THE EARLIEST ORDER DATE
-- FETCHING THE PRODUCT NAME FOR THE FIRST ORDER
-- JOINING SALES WITH MENU TO GET PRODUCT DETAILS
-- SUB QUERY TO FIND THE FIRST ORDER DATE FOR EACH CUSTOMER
-- JOINING TO MATCH THE FIRST ORDER DATE WITH THE PRODUCT
SELECT
    S.CUSTOMER_ID,
    M.PRODUCT_NAME
FROM
    SALES AS S
    INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
    INNER JOIN (
        SELECT
            CUSTOMER_ID,
            MIN(ORDER_DATE) AS FIRST_ORDER_DATE
        FROM
            SALES
        GROUP BY
            CUSTOMER_ID
    ) AS SUB ON S.CUSTOMER_ID = SUB.CUSTOMER_ID
    AND S.ORDER_DATE = SUB.FIRST_ORDER_DATE;

-- 04. QUERY TO FIND THE MOST PURCHASED ITEM ON THE MENU AND THE TOTAL TIMES IT WAS PURCHASED
-- COUNTING THE NUMBER OF TIMES EACH PRODUCT WAS PURCHASED
-- GROUPING BY PRODUCT TO AGGREGATE PURCHASE COUNTS
-- ORDERING BY THE HIGHEST PURCHASE COUNT
-- LIMITING TO THE TOP PRODUCT ONLY
SELECT
    PRODUCT_ID,
    COUNT(PRODUCT_ID) AS PRODUCT_COUNT
FROM
    SALES
GROUP BY
    PRODUCT_ID
ORDER BY
    PRODUCT_COUNT DESC
LIMIT
    1;

-- QUERY TO RETRIEVE THE NAME OF THE MOST PURCHASED ITEM AND ITS PURCHASE COUNT
-- FETCHING THE PRODUCT NAME AND ITS TOTAL PURCHASE COUNT
-- SUB QUERY TO FIND THE MOST PURCHASED PRODUCT
-- JOINING TO MATCH PRODUCT ID WITH ITS NAME
SELECT
    M.PRODUCT_NAME,
    SUB.PRODUCT_COUNT
FROM
    MENU AS M
    INNER JOIN (
        SELECT
            PRODUCT_ID,
            COUNT(PRODUCT_ID) AS PRODUCT_COUNT
        FROM
            SALES
        GROUP BY
            PRODUCT_ID
        ORDER BY
            PRODUCT_COUNT DESC
        LIMIT
            1
    ) AS SUB ON M.PRODUCT_ID = SUB.PRODUCT_ID;

-- 05. QUERY TO FIND THE MOST POPULAR ITEM FOR EACH CUSTOMER
-- COUNTING HOW MANY TIMES EACH PRODUCT WAS ORDERED BY THE CUSTOMER
-- GROUPING BY CUSTOMER AND PRODUCT TO GET ORDER COUNTS
SELECT
    S.CUSTOMER_ID,
    M.PRODUCT_NAME,
    COUNT(M.PRODUCT_NAME) AS ORDER_COUNT
FROM
    SALES AS S
    INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY
    S.CUSTOMER_ID,
    M.PRODUCT_NAME;

-- CTE TO CREATE A RANKED LIST OF ITEMS FOR EACH CUSTOMER BASED ON POPULARITY
-- COUNTING ROWS PER CUSTOMER AND PRODUCT
-- RANKING ITEMS BY ORDER COUNT WITHIN EACH CUSTOMER'S PURCHASES
-- QUERY TO SELECT THE MOST POPULAR ITEM FOR EACH CUSTOMER
-- SELECTING THE TOP RANKED ITEM FOR EACH CUSTOMER
-- FILTERING TO INCLUDE ONLY THE MOST POPULAR ITEM PER CUSTOMER
WITH
    ORDER_COUNT_TABLE AS (
        SELECT
            S.CUSTOMER_ID,
            M.PRODUCT_NAME,
            COUNT(*) AS ORDER_COUNT
        FROM
            SALES S
            INNER JOIN MENU M ON S.PRODUCT_ID = M.PRODUCT_ID
        GROUP BY
            S.CUSTOMER_ID,
            M.PRODUCT_NAME
    ),
    ORDER_COUNT_RANK AS (
        SELECT
            CUSTOMER_ID,
            PRODUCT_NAME,
            ORDER_COUNT,
            RANK() OVER (
                PARTITION BY
                    CUSTOMER_ID
                ORDER BY
                    ORDER_COUNT DESC
            ) AS RANK_NO
        FROM
            ORDER_COUNT_TABLE
    )
SELECT
    CUSTOMER_ID,
    PRODUCT_NAME
FROM
    ORDER_COUNT_RANK
WHERE
    RANK_NO = 1;

-- 06. QUERY TO FIND THE FIRST ITEM PURCHASED BY A CUSTOMER AFTER THEY BECAME A MEMBER
-- JOIN SALES AND MEMBERS TABLE TO GET ALL PURCHASES
-- RETRIEVING CUSTOMER PURCHASE DETAILS
SELECT
    S.CUSTOMER_ID,
    S.ORDER_DATE,
    S.PRODUCT_ID
FROM
    SALES AS S
    INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID;

-- FILTER TO INCLUDE ONLY PURCHASES MADE AFTER THE CUSTOMER JOINED THE MEMBERSHIP PROGRAM
-- RETRIEVING PURCHASES WHERE THE ORDER DATE IS ON OR AFTER THE JOIN DATE
SELECT
    S.CUSTOMER_ID,
    S.ORDER_DATE,
    S.PRODUCT_ID
FROM
    SALES AS S
    INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
WHERE
    S.ORDER_DATE >= M.JOIN_DATE;

-- FIND THE FIRST PURCHASE MADE AFTER JOINING BY USING RANKING FUNCTION
-- RANK PURCHASES PER CUSTOMER
-- ORDER BY DATE TO FIND THE FIRST PURCHASE
SELECT
    S.CUSTOMER_ID,
    S.ORDER_DATE,
    S.PRODUCT_ID,
    RANK() OVER (
        PARTITION BY
            S.CUSTOMER_ID
        ORDER BY
            ORDER_DATE
    ) AS ORDER_RANK
FROM
    SALES AS S
    INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
WHERE
    S.ORDER_DATE >= M.JOIN_DATE;

-- USE CTE TO RANK PURCHASES AND SELECT THE FIRST PURCHASE PER CUSTOMER AFTER JOINING
-- RANK PURCHASES PER CUSTOMER
-- ORDER BY DATE TO FIND THE FIRST PURCHASE
-- SELECTING ALL FIELDS FROM CTE
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID,
            RANK() OVER (
                PARTITION BY
                    S.CUSTOMER_ID
                ORDER BY
                    ORDER_DATE
            ) AS ORDER_RANK
        FROM
            SALES AS S
            INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
        WHERE
            S.ORDER_DATE >= M.JOIN_DATE
    )
SELECT
    *
FROM
    CTE
WHERE
    ORDER_RANK = 1;

-- FILTER TO INCLUDE ONLY THE FIRST PURCHASE
-- FINAL STEP: JOIN WITH MENU TABLE TO GET THE PRODUCT NAME
-- RANK PURCHASES PER CUSTOMER
-- ORDER BY DATE TO FIND THE FIRST PURCHASE
-- SELECTING THE PRODUCT NAME OF THE FIRST PURCHASE
-- FILTER TO INCLUDE ONLY THE FIRST PURCHASE
-- ORDER BY CUSTOMER_ID
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID,
            RANK() OVER (
                PARTITION BY
                    S.CUSTOMER_ID
                ORDER BY
                    ORDER_DATE
            ) AS ORDER_RANK
        FROM
            SALES AS S
            INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
        WHERE
            S.ORDER_DATE >= M.JOIN_DATE
    )
SELECT
    CUSTOMER_ID,
    ORDER_DATE,
    M.PRODUCT_NAME
FROM
    CTE
    INNER JOIN MENU AS M ON CTE.PRODUCT_ID = M.PRODUCT_ID
WHERE
    ORDER_RANK = 1
ORDER BY
    1;

-- 07. QUERY TO FIND THE ITEM PURCHASED JUST BEFORE THE CUSTOMER BECAME A MEMBER
-- FIRST, JOIN SALES AND MEMBERS TABLE TO GET TRANSACTIONS BEFORE JOINING DATE
-- RETRIEVING CUSTOMER PURCHASE DETAILS BEFORE MEMBERSHIP
-- FILTER TO INCLUDE PURCHASES MADE ON OR BEFORE THE JOIN DATE
SELECT
    S.CUSTOMER_ID,
    S.ORDER_DATE,
    S.PRODUCT_ID
FROM
    SALES AS S
    INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
WHERE
    S.ORDER_DATE <= M.JOIN_DATE;

-- ADD WINDOW FUNCTION RANK TO IDENTIFY THE MOST RECENT PURCHASE BEFORE JOINING
-- RANK PURCHASES PER CUSTOMER
-- ORDER BY DATE TO FIND THE MOST RECENT PURCHASE
-- FILTER TO INCLUDE PURCHASES MADE ON OR BEFORE THE JOIN DATE
SELECT
    S.CUSTOMER_ID,
    S.ORDER_DATE,
    S.PRODUCT_ID,
    RANK() OVER (
        PARTITION BY
            S.CUSTOMER_ID
        ORDER BY
            S.ORDER_DATE DESC
    ) AS DATE_RANK
FROM
    SALES AS S
    INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
WHERE
    S.ORDER_DATE <= M.JOIN_DATE;

-- USE CTE TO RANK PURCHASES AND SELECT THE MOST RECENT PURCHASE PER CUSTOMER BEFORE JOINING
-- RANK PURCHASES PER CUSTOMER
-- ORDER BY DATE TO FIND THE MOST RECENT PURCHASE
-- SELECTING ALL FIELDS FROM CTE
-- FILTER TO INCLUDE ONLY THE MOST RECENT PURCHASE BEFORE JOINING
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID,
            RANK() OVER (
                PARTITION BY
                    S.CUSTOMER_ID
                ORDER BY
                    S.ORDER_DATE DESC
            ) AS DATE_RANK
        FROM
            SALES AS S
            INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
        WHERE
            S.ORDER_DATE <= M.JOIN_DATE
    )
SELECT
    *
FROM
    CTE
WHERE
    DATE_RANK = 1;

-- FINAL STEP: JOIN WITH MENU TABLE TO GET THE PRODUCT NAME
-- RANK PURCHASES PER CUSTOMER
-- ORDER BY DATE TO FIND THE MOST RECENT PURCHASE
-- SELECTING THE PRODUCT NAME OF THE MOST RECENT PURCHASE BEFORE JOINING
-- FILTER TO INCLUDE ONLY THE MOST RECENT PURCHASE
-- ORDER BY CUSTOMER_ID
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID,
            RANK() OVER (
                PARTITION BY
                    S.CUSTOMER_ID
                ORDER BY
                    S.ORDER_DATE DESC
            ) AS DATE_RANK
        FROM
            SALES AS S
            INNER JOIN MEMBERS AS M ON M.CUSTOMER_ID = S.CUSTOMER_ID
        WHERE
            S.ORDER_DATE <= M.JOIN_DATE
    )
SELECT
    CUSTOMER_ID,
    ORDER_DATE,
    M.PRODUCT_NAME
FROM
    CTE
    INNER JOIN MENU AS M ON M.PRODUCT_ID = CTE.PRODUCT_ID
WHERE
    DATE_RANK = 1
ORDER BY
    1;

/*
MEMBERS
+-------------+------------+
| customer_id | join_date  |
+-------------+------------+
| A           | 2021-01-07 |
| B           | 2021-01-09 |
+-------------+------------+

BEFORE JOINING
+-------------+------------+--------------+
| CUSTOMER_ID | ORDER_DATE | PRODUCT_NAME |
+-------------+------------+--------------+
| A           | 2021-01-07 | curry        |
| B           | 2021-01-04 | sushi        |
+-------------+------------+--------------+

AFTER JOINING
+-------------+------------+--------------+
| CUSTOMER_ID | ORDER_DATE | PRODUCT_NAME |
+-------------+------------+--------------+
| A           | 2021-01-07 | curry        |
| B           | 2021-01-11 | sushi        |
+-------------+------------+--------------+

 */
-- 08. QUERY TO FIND THE TOTAL ITEMS AND AMOUNT SPENT BY EACH MEMBER BEFORE THEY BECAME A MEMBER
-- FIRST, RETRIEVE TRANSACTIONS OF CUSTOMERS BEFORE THEY BECAME MEMBERS
-- RETRIEVING PURCHASE DETAILS OF CUSTOMERS BEFORE MEMBERSHIP
-- FILTER TO INCLUDE PURCHASES MADE ON OR BEFORE THE JOIN DATE
-- INCLUDE CUSTOMERS WHO ARE NOT MEMBERS
SELECT
    S.CUSTOMER_ID,
    S.ORDER_DATE,
    S.PRODUCT_ID
FROM
    SALES AS S
    LEFT JOIN MEMBERS AS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
WHERE
    S.ORDER_DATE <= M.JOIN_DATE
    OR M.CUSTOMER_ID IS NULL;

-- NOW, CALCULATE THE TOTAL NUMBER OF ITEMS PURCHASED PER CUSTOMER
-- RETRIEVING PURCHASE DETAILS OF CUSTOMERS BEFORE MEMBERSHIP
-- FILTER TO INCLUDE PURCHASES MADE ON OR BEFORE THE JOIN DATE
-- INCLUDE CUSTOMERS WHO ARE NOT MEMBERS
-- COUNT THE TOTAL NUMBER OF ITEMS PURCHASED PER CUSTOMER
-- GROUP BY CUSTOMER ID
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID
        FROM
            SALES AS S
            LEFT JOIN MEMBERS AS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
        WHERE
            S.ORDER_DATE <= M.JOIN_DATE
            OR M.CUSTOMER_ID IS NULL
    )
SELECT
    CUSTOMER_ID,
    COUNT(PRODUCT_ID) AS PRODUCT_COUNT
FROM
    CTE
GROUP BY
    CUSTOMER_ID;

-- NEXT, CALCULATE THE TOTAL AMOUNT SPENT PER CUSTOMER BEFORE BECOMING A MEMBER
-- RETRIEVING PURCHASE DETAILS OF CUSTOMERS BEFORE MEMBERSHIP
-- FILTER TO INCLUDE PURCHASES MADE ON OR BEFORE THE JOIN DATE
-- INCLUDE CUSTOMERS WHO ARE NOT MEMBERS
-- CALCULATE THE TOTAL AMOUNT SPENT BY EACH CUSTOMER
-- JOIN WITH MENU TABLE TO GET PRODUCT PRICES
-- GROUP BY CUSTOMER ID
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID
        FROM
            SALES AS S
            LEFT JOIN MEMBERS AS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
        WHERE
            S.ORDER_DATE <= M.JOIN_DATE
            OR M.CUSTOMER_ID IS NULL
    )
SELECT
    CUSTOMER_ID,
    SUM(M.PRICE) AS PRODUCT_SUM
FROM
    CTE
    INNER JOIN MENU M ON CTE.PRODUCT_ID = M.PRODUCT_ID
GROUP BY
    CUSTOMER_ID;

-- COMBINE BOTH THE TOTAL ITEM COUNT AND TOTAL AMOUNT SPENT INTO A SINGLE QUERY
-- RETRIEVING PURCHASE DETAILS OF CUSTOMERS BEFORE MEMBERSHIP
-- FILTER TO INCLUDE PURCHASES MADE ON OR BEFORE THE JOIN DATE
-- INCLUDE CUSTOMERS WHO ARE NOT MEMBERS
-- COUNT THE TOTAL NUMBER OF ITEMS PURCHASED PER CUSTOMER
-- CALCULATE THE TOTAL AMOUNT SPENT BY EACH CUSTOMER
-- JOIN WITH MENU TABLE TO GET PRODUCT PRICES
-- GROUP BY CUSTOMER ID
WITH
    CTE AS (
        SELECT
            S.CUSTOMER_ID,
            S.ORDER_DATE,
            S.PRODUCT_ID
        FROM
            SALES AS S
            LEFT JOIN MEMBERS AS M ON S.CUSTOMER_ID = M.CUSTOMER_ID
        WHERE
            S.ORDER_DATE <= M.JOIN_DATE
            OR M.CUSTOMER_ID IS NULL
    )
SELECT
    CUSTOMER_ID,
    COUNT(CUSTOMER_ID) AS PRODUCT_COUNT,
    SUM(M.PRICE) AS PRODUCT_SUM
FROM
    CTE
    INNER JOIN MENU M ON CTE.PRODUCT_ID = M.PRODUCT_ID
GROUP BY
    CUSTOMER_ID;

-- 09. QUERY TO CALCULATE THE TOTAL POINTS FOR EACH CUSTOMER BASED ON SPENDING AND POINTS MULTIPLIER
-- FIRST, CALCULATE THE TOTAL AMOUNT SPENT BY EACH CUSTOMER
-- CALCULATE THE TOTAL AMOUNT SPENT BY EACH CUSTOMER
-- CALCULATE THE POINTS BASED ON SPENDING AND APPLY MULTIPLIER FOR SUSHI
-- APPLY 2x POINTS MULTIPLIER FOR SUSHI
-- STANDARD POINTS CALCULATION (10 POINTS PER $1 SPENT)
-- CALCULATE THE TOTAL POINTS FOR EACH CUSTOMER
-- FINAL SELECTION OF CUSTOMER ID AND THEIR TOTAL POINTS
-- DISPLAY THE TOTAL POINTS FOR EACH CUSTOMER
WITH
    TOTAL_SPENT AS (
        SELECT
            S.CUSTOMER_ID,
            SUM(M.PRICE) AS TOTAL_AMOUNT
        FROM
            SALES AS S
            INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
        GROUP BY
            S.CUSTOMER_ID
    ),
    POINTS AS (
        SELECT
            S.CUSTOMER_ID,
            SUM(
                CASE
                    WHEN M.PRODUCT_NAME = 'sushi' THEN M.PRICE * 2 * 10
                    ELSE M.PRICE * 10
                END
            ) AS TOTAL_POINTS
        FROM
            SALES AS S
            INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
        GROUP BY
            S.CUSTOMER_ID
    )
SELECT
    CUSTOMER_ID,
    TOTAL_POINTS
FROM
    POINTS;